import 'dotenv/config'
import prompts from 'prompts'

import { TelegramClient } from 'telegram'
import { NewMessage } from 'telegram/events'
import { StringSession } from 'telegram/sessions'

import type { UserReplyData } from '@/types'
import { canReplyToUser, getUserInfo, isOnVacation } from '@/shared'

const apiId: number = Number(process.env.API_ID)
const apiHash: string = process.env.API_HASH!
const session: string = process.env.APP_SESSION!

const AUTO_REPLY = '–ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–π—á–∞—Å –≤ –æ—Ç–ø—É—Å–∫–µ –¥–æ 29 –∏—é–Ω—è üå¥ \n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!'

const replies = new Map<number, UserReplyData> ()

async function main() {
    try {
        const stringSession = new StringSession(session || '')

        const client = new TelegramClient(stringSession, apiId, apiHash, {
            connectionRetries: 5,
            retryDelay: 2000,
            timeout: 10000
        })

        await client.start({
            onError: (err) => {
                console.error('Something went wrong:', err)
                process.exit(1)
            },
            phoneNumber: async () => {
                const response = await prompts({ type: 'text', name: 'phone', message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:' })
                return response.phone
            },
            password: async () => {
                const response = await prompts({ type: 'password', name: 'password', message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:' })
                return response.password
            },
            phoneCode: async () => {
                const response = await prompts({ type: 'text', name: 'phoneCode', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:' })
                return response.phoneCode
            }
        })

        console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

        if (!stringSession) {
            client.session.save()!
        }     

        const me = await client.getMe()
        console.log(`üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${me.firstName} ${me.lastName || ''} (@${me.username || '–±–µ–∑ username'})`)
        
        if (!isOnVacation()) {
            console.log('‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –°–µ–π—á–∞—Å –Ω–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞')
        }

        client.addEventHandler(async (event) => {
            try {
                const message = event.message

                console.log(event)

                // @ts-ignore FIXME:
                if (message.out || message.fromId?.userId === me.id) {
                    return
                }

                if (!message.isPrivate) {
                    return
                }

                const sender = await message.getSender()
                const userInfo = getUserInfo(sender)
                const userId = sender?.id

                if (!userId) {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è')
                    return
                }

                console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${userInfo}`)

                // @ts-ignore FIXME:
                if (!canReplyToUser(userId, replies)) {
                    return
                }

                await message.respond({ message: AUTO_REPLY })

                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userInfo}`)

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
            }
        }, new NewMessage({}))

        console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        console.log(`üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: "${AUTO_REPLY}"`)
        console.log("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        process.on('SIGINT', async () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...')
            try {
                await client.disconnect()
                console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω')
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error)
            }
            process.exit(0)
        })

        setInterval(() => {
            const cutoffTime = Date.now() - (24 * 60 * 60 * 1000)
            let cleanedCount = 0

            for (const [userId, userData] of replies.entries()) {
                if (userData.lastReply < cutoffTime) {
                    replies.delete(userId)
                    cleanedCount++
                }
            }

            if (cleanedCount > 0) {
                console.log(`üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${cleanedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
            }
        }, 60 * 60 * 1000)

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
        process.exit(1)
    }
}

main().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error)
    process.exit(1)
})